require: 
  - rubocop-rails
  - rubocop-rspec

AllCops:
  TargetRubyVersion: 3.0
  # RuboCop has a bunch of cops enabled by default. This setting tells RuboCop
  # to ignore them, so only the ones explicitly set in this file are enabled.
  DisabledByDefault: true
  Exclude:
    - '**/templates/**/*'
    - '**/vendor/**/*'
    - 'actionpack/lib/action_dispatch/journey/parser.rb'

Style/Documentation:
  Enabled: false

Style/ParallelAssignment:
  Enabled: false

Layout/LineLength:
  Max: 100

Style/NumericLiterals:
  Enabled: false

# Prefer &&/|| over and/or.
Style/AndOr:
  Enabled: true

# Align `when` with `case`.
Layout/CaseIndentation:
  Enabled: true

# Align comments with method definitions.
Layout/CommentIndentation:
  Enabled: true

# No extra empty lines.
Layout/EmptyLines:
  Enabled: true

# In a regular class definition, no empty lines around the body.
Layout/EmptyLinesAroundClassBody:
  Enabled: true

# In a regular method definition, no empty lines around the body.
Layout/EmptyLinesAroundMethodBody:
  Enabled: true

# In a regular module definition, no empty lines around the body.
Layout/EmptyLinesAroundModuleBody:
  Enabled: true

# Align `end` with the matching keyword or starting expression except for
# assignments, where it should be aligned with the LHS.
Layout/EndAlignment:
  Enabled: true
  AutoCorrect: true
  EnforcedStyleAlignWith: variable

# Use Ruby >= 1.9 syntax for hashes. Prefer { a: :b } over { :a => :b }.
Style/HashSyntax:
  Enabled: true

# Two spaces, no tabs (for indentation).
Layout/IndentationWidth:
  Enabled: true

Layout/SpaceAfterColon:
  Enabled: true

Layout/SpaceAfterComma:
  Enabled: true

Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true

Layout/SpaceAroundKeyword:
  Enabled: true

Layout/SpaceAroundOperators:
  Enabled: true

Layout/SpaceBeforeFirstArg:
  Enabled: true

# Defining a method with parameters needs parentheses.
Style/MethodDefParentheses:
  Enabled: true

# Use `foo {}` not `foo{}`.
Layout/SpaceBeforeBlockBraces:
  Enabled: true

# Use `foo { bar }` not `foo {bar}`.
Layout/SpaceInsideBlockBraces:
  Enabled: true

# Use `{ a: 1 }` not `{a:1}`.
Layout/SpaceInsideHashLiteralBraces:
  Enabled: true

Layout/SpaceInsideParens:
  Enabled: true

# Check quotes usage according to lint rule below.
Style/StringLiterals:
  Enabled: true
  EnforcedStyle: double_quotes

Layout/HashAlignment:
  Enabled: true

# Checks for extra/unnecessary whitespace.
Layout/ExtraSpacing:
  Enabled: true
  AllowForAlignment: false
  AllowBeforeTrailingComments: false
  ForceEqualSignAlignment: false

# Detect hard tabs, no hard tabs.
Layout/IndentationStyle:
  Enabled: true

Style/RedundantSelf:
  Enabled: true

# Blank lines should not have any spaces.
Layout/TrailingEmptyLines:
  Enabled: true

# No trailing whitespace.
Layout/TrailingWhitespace:
  Enabled: true

# Use quotes for string literals when they are enough.
Style/RedundantPercentQ:
  Enabled: true

# Use my_method(my_arg) not my_method( my_arg ) or my_method my_arg.
Lint/RequireParentheses:
  Enabled: true

Layout/IndentationConsistency:
  EnforcedStyle: normal

# No surrounding space for first and last element in the array ([a, b] instead of [ a, b ])
Layout/SpaceInsideArrayLiteralBrackets:
  EnforcedStyle: no_space

# This cop checks for spaces between -> and opening parameter brace in lambda literals.
Layout/SpaceInLambdaLiteral:
  EnforcedStyle: require_space

# This cop enforces the presence (default) or absence of parentheses in method calls containing parameters.
Style/MethodCallWithArgsParentheses:
  EnforcedStyle: require_parentheses
  IgnoredPatterns:
    - before_*
    - after_*
    - around_*
    - raise

# This cop checks for a line break before the first argument in a multi-line method call.
Layout/FirstMethodArgumentLineBreak:
  Enabled: true

# This cop checks the indentation of the first parameter in a method call. Parameters after the first one are checked by Style/AlignParameters, not by this cop.
Layout/FirstParameterIndentation:
  EnforcedStyle: align_parentheses

# This cops checks the indentation of hanging closing parentheses in method calls, method definitions, and grouped expressions. A hanging closing parenthesis means ) preceded by a line break.
Layout/ClosingParenthesisIndentation:
  Enabled: true

Layout/ParameterAlignment:
  EnforcedStyle: with_first_parameter

# This cop checks the indentation of the first argument in a method call. Arguments after the first one are checked by `Layout/ArgumentAlignment`, not by this cop.
Layout/FirstArgumentIndentation:
  EnforcedStyle: consistent

#
Layout/MultilineMethodCallBraceLayout:
  EnforcedStyle: new_line